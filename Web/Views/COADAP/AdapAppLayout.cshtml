@model Assmnts.Models.TemplateItems

<!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->

    <meta name="author" content="" />
    <meta name="description" content="" />
    <!--<link rel="shortcut icon" href="../../favicon.ico">-->

    <title>@Resources.AdapAppLayout.AdapApplication</title>

    <!-- Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Montserrat:400,700" rel="stylesheet" type="text/css" />
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,400italic,700italic,400,700" rel="stylesheet" type="text/css" />
    <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css" rel="stylesheet" type="text/css" />

    <!--jQuery was 1.11.3 to 2.1.3 RRB 11/17/15 -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
    <script src="~/javascripts/jquery.growl.js"></script>
    <!-- bootstrap -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css" />
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>

    <!-- custom bootstrap nav css -->
    <link href="~/Content/adap/css/bootstrap.nav.custom.css" rel="stylesheet" type="text/css" />

    <!-- sticky footer css -->
    <link href="~/Content/adap/css/sticky-footer-navbar.css" rel="stylesheet" />

    <!-- date picker -->
    <script src="~/Content/adap/js/bootstrap-customdatepicker.js"></script>
    <link href="~/Content/adap/css/bootstrap-datepicker3.css" rel="stylesheet" />

    <!-- file upload -->
    <script src="~/Content/adap/js/fileinput.min.js"></script>
    <link href="~/Content/adap/css/fileinput.min.css" rel="stylesheet" />

    <!-- persistent storage -->
    <script src="~/Content/js/rhaboo.max.js"></script>

    <script>

        var store = Rhaboo.persistent('Values');

    $(document).ready(function () {

            if (!store.formResultId ||  store.formResultId != @Assmnts.Infrastructure.SessionHelper.SessionForm.formResultId)

                RefreshStore();


        $('.class_nextscreen').click(function () { SubmitForm('@Model.nextScreenPartId', '@Model.nextScreenSectionId'); });
        $('.class_prevscreen').click(function () { SubmitForm('@Model.prevScreenPartId', '@Model.prevScreenSectionId'); });

        $('.input-group.date').datepicker({
            autoclose: true,
            format: 'mm/dd/yyyy'
        });

        $("#hsDOB").click(function () {
            $("#dvDOBPrev").toggle();
        });

        $("#hsName").click(function () {
            $("#dvNamePrev").toggle();
        });

        //$('span.required').each(function () {
        //    if ($(this).text().trim().length == 0)
        //        $(this).append("Required");
        //}).append("<span style='color:red'>*</span>");
        $('[required]').removeAttr('required');
        $('span.control-label').css("font-weight", "bold");
        $('span.control-label').css("text-align", "left");

        //$(document).on('change', '.btn-file :file', function () {
        //    var input = $(this),
        //        numFiles = input.get(0).files ? input.get(0).files.length : 1,
        //        label = input.val().replace(/\\/g, '/').replace(/.*\//, '');
        //    input.trigger('fileselect', [numFiles, label]);
        //});

        //$('.btn-file :file').on('fileselect', function (event, numFiles, label) {

        //    var input = $(this).parents('.input-group').find(':text');
        //    var log = (numFiles > 1) ? numFiles + ' files selected' : label;

        //    if (input.length) {
        //        input.val(log);
        //    } else {
        //        if (log) alert(log);
        //    }

        //});

        // $('.datepicker').datepicker();
        //.after("<span class=\"input-group-addon\"><span class=\"glyphicon glyphicon-calendar\"></span></span>");

        // $('.date>.input-group-addon').datepicker();
        //$('.date>.input-group-addon').click(function () {
        //    $(this).siblings('.datepicker').click();
        //});

        // Hides the colored buttons on the top right of each panel
        // Remove when a working solution is implemented.
        //$('.prevAppBtn').hide();

    });

    function SubmitForm(targetPartId, targetSectionId) {
        document.getElementById('navPartId').setAttribute('value', targetPartId);
        document.getElementById('navSectionId').setAttribute('value', targetSectionId);
        $("#btnSubmit").click();
    }

    </script>    
    
    @RenderSection("AddToHead", required: false)
    
    <script>

        @*javascript below is for toggling and comparing with previous-response panels*@

        function RefreshStore() {
            store.write('formResultId', @Assmnts.Infrastructure.SessionHelper.SessionForm.formResultId);
            store.write("Values", []);
            console.log("store reset.");
        }

        $(document).ready(function () {

            //When the 'Save Application' button is clicked, refresh the store.
            $('.class_submit').bind('click', function() {

                RefreshStore();

            });

            $('.panel.panel-default').each(function () {

                var prev = $(this).clone().addClass('previous-response');                                                       //Clone the panel and add the class 'previous-repsonse'.

                prev.attr('id', prev.children('.panel-body').children('.prevAppBtn').children('.btn').attr('data-prevdiv'));    //Set the id to what the prevAppBtn expects under data-prevdiv.

                prev.find('[id]').each(function () {
                    $(this).attr('id', 'PREVIOUS_' + $(this).attr('id'));                                                       //Preempt each descendant's id with 'PREVIOUS_'.
                });
                prev.find('[name]').each(function () {
                    $(this).attr('name', 'PREVIOUS_' + $(this).attr('name'));                                                   //Preempt each descendant's name with 'PREVIOUS_'.
                });

                prev.insertAfter(this);                                                                                         //Finally, insert the clone after the original.  (Do this last or you lose the radio button values.)

                $(this).not('.previous-response').find('input, select').each(function () {                                      //For each original input or select...

                    var id = $(this).attr("id");                                                                                //...get the id.

                    //Search the store for the index of the specified id.

                    for (idx = store.Values.length - 1; idx >= 0; idx--)
                        if (store.Values[idx].text == id)
                            break;

                    //If not found, get the value, add it to the store and save the index.

                    if (idx < 0) {

                        var value = $(this).attr('type') == 'checkbox' || $(this).attr('type') == 'radio' ? $(this).attr('checked') : $(this).val();    //Get the value (or, in case of a checkbox or radio button, the checked value).

                        //console.log('Assigning ' + value + ' to ' + id + '.');

                        idx = store.Values.push({ text: id, value: value }) - 1;                //Push the value and

                    }

                    //Set the corresponding PREVIOUS input.

                    if ($(this).attr('type') != 'checkbox' && $(this).attr('type') != 'radio')  //If the element is not a checkbox or a radio button...

                        $('#PREVIOUS_' + id).val(store.Values[idx].value);                      //...set the corresponding PREVIOUS value.

                    else if ( typeof store.Values[idx].value != 'undefined' )                   //If it's a checkbox or radio button, and the value is not undefined...

                        $('#PREVIOUS_' + id).attr('checked', store.Values[idx].value);          //...set the corresponding PREVIOUS checked.

                    else

                        $('#PREVIOUS_' + id).removeAttr('checked');                             //Otherwise, remove the checked attribute.

                });
            });

            //style all previous-response panels and disable their inputs
            $('.previous-response').each(function () {
                $(this).hide();
                $(this).find('.panel-body').css('background-color', 'rgb(220,220,220)');
                disableInputs($(this));
            });

            //for each of the red/green buttons...
            $('.prevAppBtn button').each(function () {
                var prevdiv = $('#' + $(this).attr('data-prevdiv'));

                //set this button to toggle the corresponding previous-reponse panel
                $(this).click(function () {
                    prevdiv.toggle();
                });

                //add some styling to match comments buttons
                $(this).append('<span class="glyphicon" style="width: 14px; height: 14px;"></span>');
                $(this).css('margin-left', '4px');

                //compare previous response with current responses
                $(this).addClass(compareResponses(prevdiv) ? 'btn-success' : 'btn-danger');
            });
        });

        function getRsp(element) {

            //drop-downs
            if (element.is('select')) {
                return element.val();
            }

            //checkboxes
            if (element.is('input[type=checkbox]')) {
                return element.attr('checked');
            }

            //radios
            if (element.is('input[type=radio]')) {
                return $('[id=' + element.attr('id') + '][checked]').attr('value');
            }

            //regular text fields
            return element.val();
        }

        function compareResponses(parent) {
            //compare
            if( parent.is('[id]') && parent.is('input, select') ){
                var prevId = parent.attr('id');
                if (prevId.slice(0, 9) == 'PREVIOUS_') {
                    var currId = prevId.slice(9);

                    var prevRsp = getRsp(parent);
                    var currRsp = getRsp($('#' + currId));

                    //console.log("Id: " + currId + ", current: " + currRsp + ", previous: " + prevRsp);

                    if (!( prevRsp === currRsp))
                        return false;
                }
            }

            //recurse
            var result = true;
            parent.children().each(function () {
                if (!compareResponses($(this))) {
                    result = false;
                    return false; //break out of this each() loop
                }
            });
            return result;
        }

        //should be called for each previous-response panel
        function disableInputs(parent) {

            //disable inpuyt elements
            if (parent.is('input, select')) {
                parent.prop('disabled', true);
            }

            //hide icons on the top-right of the panel
            if (parent.is('.pull-right')) {
                parent.hide();
            }

            parent.children().each(function () {
                disableInputs($(this));
            });
        }

    </script>
</head>
<body>

    @Html.Partial("~/Views/COADAP/AdapAppNavMenu.cshtml", @Model.navMenuModel);

    <div class="container" style="padding-bottom:75px; padding-top:0px;">

        <!-- the div below is for small numbers of messages to appear within the application screens, and should be made hidden in the validation errors screen-->
        <div id="quickValidationMessages">
            @if (Model.validationMessages != null)
            {
                foreach (string message in Model.validationMessages)
                {
                    <div class="alert alert-success alert-dismissible" role="alert">
                        <button type="button" class="close" data-dismiss="alert" aria-label="Close" style="top:-5px;"><span aria-hidden="true">&times;</span></button>
                        @message
                    </div>
                }
            }
        </div>

        <form class="form-horizontal" action="/Results/Save" method="post" id="form-id" enctype="multipart/form-data">

            <input type="hidden" id="redirectUrl" name="redirectUrl" />
            <input type="hidden" id="navPartId" name="navPartId" value="@Model.nextScreenPartId" />
            <input type="hidden" id="navSectionId" name="navSectionId" value="@Model.nextScreenSectionId" />
            <input type="hidden" id="controller" name="UseThisControllerForTemplate" value="COADAP" />

            @RenderBody()

            <hr class="hr-dark" />

            @* Hide the Previous / Next buttons if on the validation screen. *@
            <div class="col-md-12">
                <button type="button" class="btn btn-danger btn-s class_prevornextscreen class_prevscreen">
                    <span class="glyphicon glyphicon-arrow-left"></span> @Resources.AdapAppLayout.PrevSection
                </button>
                <button type="button" class="btn btn-danger btn-s pull-right class_prevornextscreen class_nextscreen">
                    @Resources.AdapAppLayout.NextSection <span class="glyphicon glyphicon-arrow-right"></span>
                </button>
                @{ string disabledAttr = (@Model.navMenuModel.readOnly) ? "disabled" : String.Empty; }
                <button type="button" class="btn btn-primary btn-s pull-right class_cert" style="margin-right:5px" @disabledAttr><span class="glyphicon glyphicon-check"></span> @Resources.AdapAppLayout.CertAndSubmit</button>
                <button type="button" class="btn btn-primary btn-s pull-right class_check" style="margin-right:5px"><span class="glyphicon glyphicon-question-sign"></span> @Resources.AdapAppLayout.CheckForErrors</button>
                <button type="button" class="btn btn-primary btn-s pull-right class_submit" style="margin-right:5px" @disabledAttr><span class="glyphicon glyphicon-floppy-open"></span> @Resources.AdapAppLayout.SaveApp</button>

            </div>

            <input style="display:none" type="submit" value="Save" id="btnSubmit" />

            @*<div class="col-md-12">

                    <button type="button" class="btn btn-primary btn-s pull-right" onclick="window.location.href='adap_app_contact_info.html'">
                        Next Section <span class="glyphicon glyphicon-arrow-right"></span>
                    </button>

                    <button type="button" class="btn btn-success btn-s pull-right" style="margin-right:5px" onclick="window.location.href='adap_app_household.html'">
                        <span class="glyphicon glyphicon-check"></span> Submit Application
                    </button>

                    <button type="button" class="btn btn-primary btn-s pull-right" style="margin-right:5px" onclick="window.location.href='adap_app_household.html'">
                        <span class="glyphicon glyphicon-check"></span> Save Application
                    </button>

                    <button type="button" class="btn btn-danger btn-s pull-right" style="margin-right:5px" onclick="window.location.href='adap_app_household.html'">
                        <span class="glyphicon glyphicon-question-sign"></span> Validate Application
                    </button>
                </div>
                <br /><br /><br />*@
        </form>
    </div>    
    
    @Html.Partial("~/Views/Templates/Adap/AdapFooter.cshtml");
</body>
</html>
